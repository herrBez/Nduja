from abc import abstractmethod
from typing import Dict
from typing import List
from typing import Any
from typing import Tuple

class Pattern:
    @property
    def symbol(self) -> str: ...
    @property
    def name(self) -> str: ...

    def __init__(self, format_object : Dict[str, str]) -> None: ...
    def __str__(self) -> str : ...

    def match(self, content: str) -> List[Tuple[str, str]]: ...


def match_email(text: str) -> List[str]: ...

def match_personal_website(text: str) -> List[str]: ...

def flatten(l : List[List[Any]]) -> List[Any]: ...

class AbsWalletCollector:
    @property
    def patterns(self) -> List[Pattern]: ...

    def __init__(self, format_file: str) -> None: ...

    def request_url(self, url: str, token: str=None) -> str: ...

    @abstractmethod
    def collect_raw_result(self, queries: List[str]) -> List[Any]: ...

    @abstractmethod
    def construct_queries(self) -> List[str]: ...

    @abstractmethod
    def extract_content(self, response: Dict[str, Any]) -> List[str]: ...

    @abstractmethod
    def build_answer_json(self, raw_response: Dict[str, Any], content: str,
                          match_list, symbol_list, wallet_list, emails=None,
                          websites=None) -> Dict[str, Any]: ...

    def collect_address(self) -> str: ...

